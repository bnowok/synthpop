export(syn,
       syn.strata,
       syn.cart,
       syn.ctree,
       syn.logreg,
       syn.norm,
       syn.normrank,
       syn.passive,
       syn.pmm,
       syn.polr,
       syn.polyreg,
       syn.sample,
       syn.survctree,
       syn.lognorm,
       syn.sqrtnorm,
       syn.cubertnorm,
       syn.rf,
       syn.ranger,
       syn.bag,
       syn.nested,
       syn.satcat,
       syn.catall,
       syn.ipf,
       syn.smooth)

export(compare, compare.synds, compare.fit.synds,
       compare.data.frame, compare.list,
       print.compare.fit.synds,	multi.compare,
       lm.synds, glm.synds,
       multinom.synds, polr.synds,
       print.fit.synds, print.synds,
       summary.synds, print.summary.synds,
       summary.fit.synds, print.summary.fit.synds,
       replicated.uniques, sdc, read.obs, write.syn,
       utility.gen, utility.gen.synds,
       utility.gen.data.frame, utility.gen.list,
       print.utility.gen,
       utility.tab, utility.tab.synds,
       utility.tab.data.frame, utility.tab.list,
       print.utility.tab,
       utility.tables, utility.tables.synds,
       utility.tables.data.frame, utility.tables.list,
       print.utility.tables,
       disclosure, disclosure.synds,
       disclosure.data.frame, disclosure.list,
       print.disclosure,
       multi.disclosure, multi.disclosure.synds,
       multi.disclosure.data.frame, multi.disclosure.list,
       codebook.syn, numtocat.syn, mergelevels.syn,
       print.multi.disclosure, synorig.compare)

S3method(compare, default)
S3method(compare, synds)
S3method(compare, fit.synds)
S3method(compare, data.frame)
S3method(compare, list)

S3method(utility.gen, default)
S3method(utility.gen, synds)
S3method(utility.gen, data.frame)
S3method(utility.gen, list)

S3method(utility.tab, default)
S3method(utility.tab, synds)
S3method(utility.tab, data.frame)
S3method(utility.tab, list)

S3method(utility.tables, default)
S3method(utility.tables, synds)
S3method(utility.tables, data.frame)
S3method(utility.tables, list)

S3method(disclosure, default)
S3method(disclosure, synds)
S3method(disclosure, data.frame)
S3method(disclosure, list)

S3method(multi.disclosure, default)
S3method(multi.disclosure, synds)
S3method(multi.disclosure, data.frame)
S3method(multi.disclosure, list)

S3method(print, synds)
S3method(summary, synds)
S3method(print, summary.synds)
S3method(print, fit.synds)
S3method(summary, fit.synds)
S3method(print, summary.fit.synds)
S3method(print, compare.fit.synds)
S3method(print, compare.synds)
S3method(print, utility.gen)
S3method(print, utility.tab)
S3method(print, utility.tables)
S3method(print, repuniq.synds)
S3method(print, disclosure)
S3method(print, multi.disclosure)


#exportClasses(synds)
#exportClasses(fit.synds)

import(MASS,
       methods,
       nnet,
       lattice,
       foreign,
       ggplot2,
       plyr,
       proto,
       survival)

#importFrom("partykit", "ctree", "ctree_control")
importFrom("broman", "runningmean")
importFrom("party", "ctree", "ctree_control", "where", "cforest", 
           "cforest_unbiased")
importFrom("rpart", "rpart", "rpart.control")
importFrom("polspline", "polymars", "predict.polymars", "polyclass", "ppolyclass")
importFrom("randomForest", "randomForest")
importFrom("ranger", "ranger")
importFrom("classInt", "classIntervals")
#importFrom(glmnet, glmnet, predict.glmnet) not used at the moment
importFrom("mipfp", "Ipfp")
importFrom("graphics", "hist")
importFrom("stats", "lm", "glm", "C", "as.formula", "coef", "coefficients", 
           "contr.treatment", "cor", "density", "formula", "model.frame", 
           "model.matrix", "na.pass", "pnorm", "predict", "qnorm", "rbinom", 
           "rchisq", "rnorm", "runif", "setNames", "summary.glm", "var", 
           "residuals", "sd", "xtabs", "pchisq", "smooth.spline", "pf", 
           "printCoefmat","vcov", "rmultinom", "median", "ks.test", "wilcox.test")
importFrom("utils", "head", "read.csv", "read.table", "tail", "combn",
           "write.csv", "write.table")
importFrom("stringr", "str_pad", "str_detect",  "str_extract_all","str_subset","word","fixed")
importFrom("rmutil", "rlaplace")
importFrom("forcats", "fct_lump_n" , "fct_lump_min")


